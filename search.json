[{"categories":["docs"],"content":"You can create a new entry in the documentation with the command :\nmake doc-new-doc You can create a new ADR with the command :\nmake doc-new-adr ","description":"resumé du document","title":"Gérer la documentation","uri":"/template-open-project/docs/gerer-la-documentation/"},{"categories":["contribuer"],"content":"Code de conduite En participant, vous devez respecter le code de conduite du projet.\nQu’est ce que je peux faire Beaucoup de choses, l’écriture de code n’étant pas l’unique manière de contribuer au projet !\nRapporter des bugs Il parait que chaque bug relevé sauve un chaton. En tout cas, la technique du ZBSD (Zero-Bug Software Development) semble porter ses fruits, comme le rapporte Andrew Fulton. Donc, si à chaque bug rencontré quelqu’un ouvre une issue avec le label Rapport de bug, ce seront des familles entières de chats qui seront sauvées.\nSuggérer des améliorations ou de nouvelles fonctionnalités Dans ce cas, ouvrez une nouvelle issue de type Demande d’amélioration en décrivant bien votre idée.\nSignaler des manques dans la documentation Si pendant votre participation au projet (que ce soit en l’utilisant ou en participant au code) vous n’avez pas réussit à faire quelque chose par manque de solution, signalez le en ouvrant une issue de type Demande de documentation.\nEt d’ailleurs n’hésitez pas à traiter cette issue en proposant un PR améliorant la documentation si vous avez trouvez une solution !\nContribuer au code Pour ce projet, il n’y a pas grand-chose à faire sur du code proprement dit … Par contre, toutes contributions aux contenus éditoriaux sont les bienvenues !\nL’environnement de développement Quelle que soit votre type d’implication, ce peut-être une bonne chose que d’installer le projet sur votre machine pour pouvoir visualiser votre contribution avant de la proposer sur Github.\nPrérequis Docker Docker Compose Python en v3 (pour le hook git) En option pour gérer les releases, vous aurez besoin de :\ncocogitto L’organisation du code . ├── cog.toml ├── commit-msg ├── docker-compose.yaml ├── docs │ └── ... ├── hugo-config.toml ├── LICENSE.md ├── logo.png ├── Makefile ├── project-documentation │ └── ... ├── published-documentation │ └── ... └── README.md On trouve des fichiers de documentation (README.md, LICENSE.md, …) et de configuration (cog.toml, hugo-config.toml, …) à la racine du projet, mais aussi 3 répertoires :\n/docs : c’est le répertoire où l’on trouve les documents permettant au projet de répondre aux normes communautaires des projets libres et open-source recommandées par Github. C’est la norme Github qui explique que c’est documents ne sont pas présent au sein du répertoire /project-documentation. /project-documentation : c’est le répertoire où l’on trouve les fichiers de documentations générés et gérés par Hugo. /published-documentation : c’est le répertoire où sont générés les fichiers statiques finaux de Hugo, avant publication sur la Github page. Ce répertoire est présent dans le code, mais son contenu est exclu de Git. Installer le projet make install Démarrer le projet make start Le projet est alors disponible:\nhttp://localhost:xxxx (en fonction du projet) la documentation du projet sur http://localhost:1313/nom-du-repo-github Excalidraw (pour faire les schémas de documentation) sur http://localhost:3001 La convention de codage (coding style) Utilisation des commits conventionnels Par choix, le processus de déploiement sur les environnenments d’exploitation est assez manuel et repose sur des tags associés aux images Docker. Pour pouvoir suivre ce qui est déployé, nous nous basons sur les numéros de release (suivant la convention de gestion sémantique de version).\nEt c’est là que l’utilisation des commits conventionnels : ils permettent d’automatiser en parti la gestion des numéros de releases et la gestion du changelog.\nPour suivre la convention, le message du commit doit être structuré comme suit:\n\u003ctype\u003e(optional scope): \u003cdescription\u003e [optional body] [optional footer(s)] git commit -m \"type: description courte mais significative\" git commit -m \"type(scope): description courte mais significative\" Le type\nDans la convention, c’est le type qui est primordial. A certains types sont associés des changements de version de release :\ntype description versioning sémantique fix un commit de type fix corrige un bogue dans le code PATCH feat un commit de type feat introduit une nouvelle fonctionnalité dans le code MINOR BREAKING CHANGE un commit qui a dans le pied de page le mot clef BREAKING CHANGE:, ou ajoute un ! après le type/scope, introduit un changement cassant l’API. Un BREAKING CHANGE peut faire partie des commits de n’importe quel type. MAJOR Un exemple de commit conventionnel introduisant un BREAKING CHANGE :\ngit commit -m \"feat!: nouveau plan de routing\" Mais il existe d’autres type qui n’auront eux pas d’impacte sur le numéro de release. Voici la liste compléte des types (sans le BREAKING CHANGE qui peut donc être associé à n’importe quel type) :\nbuild : Change to build system chore : General tooling/config/min refactor ci : Change to CI pipeline/workflow docs : Change to documentation only feat : A new feature (semver MINOR) fix : A bug fix (semver PATCH) perf : Change that affects performance refactor : Change not related to a bug or feat style : Change to style test : Change that adds/modifies tests Le scope\nLe scope est optionnel, mais pourra par exemple par faire référence à une carte de backlog (Github, Trello, Taiga, …).\ngit commit -m \"docs(TG-6): add documention about conventional commits\" Le hook git\nVous l’aurez compris, on compte sur les développeurs pour s’approprier cette convention de commit. Mais c’est contraignant, surtout au début. Souvent, on oublie de le faire, ou si on n’oublie pas, on oublie les types disponibles …\nUn hook git (le fichier commit-msg) est normalement automatiquement installer sur votre environnement lors de votre premier make install. Si cela n’est pas le cas, vous pouvez l’ajouter vous-même.\ncp commit-msg .git/hooks/ git init Vous pouvez aussi décider de le désactiver. Mais quoi qu’il en soit, nous avons mis en place une Github action testant la validité des commits directement sur Github.\nLa documentation Ce n’est pas toujours ce qu’il y a de plus facile à faire sur un projet : écrire une documentation permettant d’utiliser le produit, mais aussi permettant de participer à son élaboration. Et tout aussi difficile, maintenir cette documentation à jours.\nPourtant, et ceci d’expérience, ce sont le plus souvent les projets les mieux documentés qui gagnent l’adhésion de la communauté ! Voici donc les quelques méthodes et règle qui nous avons mis en place chez Incaya.\nHugo Nous utilisons un conteneur Docker contenant Hugo et Excalidraw pour maintenir au plus près du code une documentation donnant du contexte, des guides ou toute autres information que l’on ne peut déduire du code.\nCette documentation est consultable sur l’environnement de développement (), mais elle est aussi automatiquement publiée lorsqu’elle est modifiée sur une Github Page : https://incaya.github.io/template-open-project/\nVous pouvez créer un nouveau fichier de documentatinon (il sera généré dans le répertoire project-documentation/documentation) avec la commande :\nmake doc-new-doc Les ADR.s Nous utilisons les ADR.s (Architectural Decision Records) pour documenter les prises de décisions liées à l’architecture du projet. Les ADRs sont en fait gérés par Hugo, et vous pouvez créer un nouvel ADR grâce à la commande :\nmake doc-new-adr Les tests Afin de faciliter l’intégration (le merge) de vos PR, surtout si elles ajoutent ou modifient du code, celles-ci devront contenir les tests couvrant vos propositions.\nLes tests sont lancés sur la plateforme d’intégration continue de Github via les Github actions.\nLes bonnes pratiques La bonne pratique, c’est de faire des PR, et puis c’est tout.\nFaire une Pull request Si vous n’avez encore jamais fait de Pull Request (PR), la lecture du tutorial Github Understanding the GitHub Flow est sûrement un bon point de départ.\nSi vous n’aviez pas encore de compte Github, en voici une bonne introduction.\nle git flow Pour le projet, nous utilisons le workflow suivant :\nLe projet principal ne possède qu’une branche main. Chaque participant réalise un fork du dépôt principal puis ouvre une branche depuis son fork pour chaque nouvelle feature. Une PR est créée depuis la branche du fork vers la branche main du dépôt principal. Si vous vous sentez un peu perdu.e, la lecture de Using the Fork-and-Branch Git Workflow devrait vous rendre plus serein.ne.\nConseils Mais voici quelques conseils qui peuvent les rendre encore meilleures :\nFaites des commits courts et bien commentés. Faites des PR courtes, toute une tache (une issue) n’a pas forcement besoin d’être adressée dans une seule PR. Faites référence à l’issue que la PR adresse. N’hésitez pas à joindre des captures d’écran, fixes ou animées. Ajouter une description et une todo list en ouvrant la PR. N’attendez pas que la PR soit terminée pour l’ouvrir : la communauté viendra plus facilement en aide en découvrant tôt la PR. Utilisez les labels WIP (Work In Progress) et RFR (Ready For Review) pour indiquer l’avancement de la PR. dernier point : tous les textes (titre, description, commentaires, etc.) sont fait en français. En effet, même si la norme en opensource c’est l’anglais, nous avons collectivement décidé d’utiliser le français pour le projet. Trouver de l’aide Dans une issue Le système d’issues du Github est très bien pensé et permet de facilement réagir, commenter, noter… Donc si une issue vous intéresse mais qu’elle ne vous semble pas claire, c’est directement dans l’issue que vous pouvez poser des questions.\nAu cours d’une pull request Si vous avez commencé une PR, mais que vous êtes bloqué, vous pouvez écrire un commentaire dessus décrivant votre problème et ajouter le label Demande d’aide :question:.\n","description":"Toutes les informations à connaitre pour pouvoir contribuer au projet.","title":"Guide de contribution","uri":"/template-open-project/contribuer/guide-de-contribution/"},{"categories":["contribuer"],"content":"Code de conduite 1. Objectif L’un des objectifs principaux d’Incaya est d’être inclusif pour le plus grand nombre de contributeurices, avec les expériences les plus variées et diversifiées possibles. À ce titre, nous nous engageons à offrir un environnement amical, sécurisé et accueillant pour toustes, sans égard au genre, à l’orientation sexuelle, aux aptitudes, à l’origine ethnique, au statut socioéconomique et à la religion (ou à l’absence de religion).\nCe code de conduite décrit nos attentes envers toutes les personnes qui participent à notre communauté, ainsi que les conséquences pour les comportements inacceptables.\nNous invitons les personnes qui participent projed d’Incaya à nous aider à créer des expériences positives et bienveillantes pour tout le monde.\n2. Citoyenneté Open Source Un autre objectif de ce code de conduite est d’accroître la citoyenneté open source en encourageant les contributeurices à reconnaître et à renforcer les relations entre nos actions et leurs effets sur notre communauté.\nLes communautés reflètent les sociétés dans lesquelles elles existent et une action positive est essentielle pour contrer les nombreuses formes d’inégalités et d’abus de pouvoir qui existent dans la société.\n3. Comportement attendu Les comportements suivants sont attendus et demandés à tous les membres de la communauté:\nParticiper de façon authentique et active. Ce faisant, vous contribuez à la santé et à la longévité de cette communauté. Faites preuve de considération et de respect dans votre discours et vos actions. Favoriser la collaboration avant le conflit. S’abstenir de tout comportement ou discours humiliant, discriminatoire ou harcelant. Portez attention à votre entourage et à vos contributeurices. Alertez nous de la communauté si vous remarquez une situation dangereuse, une personne en détresse ou des violations du présent code de conduite, même si elles semblent sans conséquence. Rappelez-vous que les lieux d’événements communautaires peuvent être partagés avec le public; veuillez faire preuve de respect envers toutes les personnes qui y vivent. Adoptez un mode de communication, y compris à l’écrit, incluant. 4. Comportement inacceptable Les comportements suivants sont considérés comme du harcèlement et sont inacceptables au sein de notre communauté:\nViolence, menaces de violence ou langage violent dirigé contre une autre personne. Blagues et langage sexistes, racistes, homophobes, transphobes, capables ou autrement discriminatoires. Afficher ou afficher du matériel sexuellement explicite ou violent. Affichage ou menace d’afficher les renseignements personnels d’autres personnes. Les insultes personnelles, en particulier celles liées au sexe, à l’orientation sexuelle, à la race, à la religion ou au handicap. Photographie ou enregistrement inapproprié. Intimidation délibérée, harcèlement ou poursuite (en ligne ou en personne). Défendre ou encourager l’un des comportements ci-dessus. Interruption continue des activités communautaires, y compris les conférences et les présentations. 5. Conséquences d’un comportement inacceptable Les comportements inacceptables de la part d’un membre de la communauté ne seront pas tolérés.\nToute personne à qui on demande d’arrêter un comportement inacceptable doit se conformer immédiatement.\nSi un membre de la communauté adopte un comportement inacceptable, les organisateurs de la communauté peuvent prendre toutes les mesures qu’ils jugent appropriées, y compris une interdiction temporaire ou une expulsion permanente de la communauté sans préavis.\n6. Rapporter un comportement jugé inacceptable Si vous êtes sujet à un comportement inacceptable ou si vous êtes témoin d’un comportement inacceptable, veuillez en aviser un organisateur de la communauté dès que possible. (contact@incaya.fr)\n7. Traitement des griefs Si vous estimez avoir été accusé faussement ou injustement d’avoir enfreint le présent code de conduite, vous devez en informer Incaya en décrivant brièvement votre grief. Votre grief sera traité conformément à nos politiques en vigueur.\n8. Champ d’application Nous nous attendons à ce que tous les participants de la communauté se conforment au présent Code de conduite dans tous les lieux communautaires, en ligne et en personne, ainsi que dans toutes les communications individuelles relatives aux affaires de la communauté.\nCe code de conduite et ses procédures connexes s’appliquent également aux comportements inacceptables qui surviennent en dehors du cadre des activités communautaires lorsque ces comportements sont susceptibles de nuire à la sécurité et au bien-être des membres de la communauté.\n9. Contact contact@incaya.fr\n10. License et attribution Ce code de conduite est distribué sous Creative Commons Attribution-ShareAlike license.\nUne partie des textes proviennent du Django Code of Conduct and the Geek Feminism Anti-Harassment Policy.\nRécupéré le 22 novembre 2016 depuis http://citizencodeofconduct.org/\n","description":"Les régles de conduite pour participer au projet","title":"Code de conduite","uri":"/template-open-project/contribuer/code-de-conduite/"},{"categories":["contribuer"],"content":"Trouver de l’aide Dans une issue Le système d’issues du Github est très bien pensé et permet de facilement réagir, commenter, noter… Donc si une issue vous intéresse mais qu’elle ne vous semble pas claire, c’est directement dans l’issue que vous pouvez poser des questions.\nAu cours d’une pull request Si vous avez commencé une PR, mais que vous êtes bloqué, vous pouvez écrire un commentaire dessus décrivant votre problème et ajouter le label Demande d’aide :question:.\n","description":"Comment et ou trouver de l'aide pour le projet","title":"Trouver de l'aide","uri":"/template-open-project/contribuer/trouver-de-l-aide/"},{"categories":["contribuer"],"content":"Politiques et procédures de sécurité Ce document décrit les procédures de sécurité et les politiques générales pour les projets Open Source d’Incaya sur le site https://github.com/incaya.\nSignaler une vulnérabilité Politique de communication Signaler une vulnérabilité L’équipe d’Incaya prend au sérieux toutes les vulnérabilités de sécurité. Nous apprécions vos efforts et votre vigilence responsable et nous ferons tout notre possible pour reconnaître vos contributions.\nSignalez les vulnérabilités de sécurité en envoyant un e-mail à l’équipe de sécurité d’Incaya à l’adresse suivante\nsecurity@incaya.fr\nLe responsable de la maintenance accusera réception de votre courriel le plus rapidement possible, indiquant les prochaines étapes du traitement de votre rapport.\nPolitique de communication Lorsque l’équipe de sécurité reçoit un rapport de bogue de sécurité, elle l’attribue à un gestionnaire principal. Cette personne coordonnera le processus de correction et de publication, qui comprend les étapes suivantes :\nConfirmer le problème et déterminer les versions affectées. Vérifier le code pour trouver tout problème similaire potentiel. Préparer les correctifs pour toutes les versions encore en maintenance. Ces correctifs seront publiés aussi rapidement que possible sur le dépôt. ","description":"La politiques et les procédures de sécurité","title":"Politique de sécurité","uri":"/template-open-project/contribuer/politique-de-securit%C3%A9/"},{"categories":["contribuer"],"content":"Pourquoi ? Si vous maintenez un projet open-source de l’ordre de 10k-200k lignes de code, je vous encourage fortement à ajouter un document ARCHITECTURE à côté de README et CONTRIBUTING. Avant d’entrer dans les détails du pourquoi et du comment, je tiens à souligner qu’il ne s’agit pas d’un autre conseil du type “les documents sont bons, écrivez plus de documents”. Je suis assez négligent en matière de documentation, et, par exemple, j’utilise souvent simplement “simplifier” comme message de validation. Néanmoins, je suis très attaché à cette question, au point de vous harceler :-)\nARCHITECTURE.md ","description":"Architecture globale du projet","title":"Architecture","uri":"/template-open-project/contribuer/architecture/"},{"categories":["changelog"],"content":"Changelog All notable changes to this project will be documented in this file. See conventional commits for commit guidelines.\n0.1.0 - 2022-08-31 Features gestion des releases - (408476c) - @alexisjanvier mise en place du conventional commit - (7c4065b) - @alexisjanvier Miscellaneous Chores publication de la documentation sur Gh pages - (482c5d8) - @alexisjanvier mise en place du site de documentation WIP - (c3c1e65) - @alexisjanvier refacto mineur - (1175395) - @alexisjanvier ajout du makefile - (641120b) - @alexisjanvier PR template - (c2cc309) - @alexisjanvier template d’issues - (893690f) - @alexisjanvier Ajout de ressources d’assistance - (27d8366) - @alexisjanvier ajout de la politique de sécurité - (a3ed298) - @alexisjanvier guide de conduite et de contribution - (1ae954e) - @alexisjanvier ajout du fichier de citation - (e6d5a3d) - @alexisjanvier Readme - (d00f35b) - @alexisjanvier ajout du .gitignore - (4719bfe) - @alexisjanvier ajout d’une license GNU GPLv3 - (5d25ba8) - @alexisjanvier Changelog generated by cocogitto.\n","description":null,"title":"","uri":"/template-open-project/changelog/current/"}]
